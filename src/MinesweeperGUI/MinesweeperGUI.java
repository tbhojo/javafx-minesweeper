package MinesweeperGUI;import javafx.animation.AnimationTimer;import javafx.application.Application;import javafx.geometry.Insets;import javafx.geometry.Pos;import javafx.scene.Scene;import javafx.scene.control.*;import javafx.scene.image.Image;import javafx.scene.image.ImageView;import javafx.scene.input.MouseButton;import javafx.scene.layout.*;import javafx.scene.text.Font;import javafx.scene.web.WebEngine;import javafx.scene.web.WebView;import javafx.stage.Stage;import java.io.File;public class MinesweeperGUI extends Application {    private MinesweeperModel model;    private GridPane gameBoard;    private AnimationTimer timer;    private Label timeLabel;    private Label minesLabel;    private long startTime;    private boolean firstMove = true;    public static void main(String[] args) {        launch(args);    }    @Override    public void start(Stage stage) {        stage.setTitle("Minesweeper");        BorderPane root = new BorderPane();        model = new MinesweeperModel();        MenuBar menuBar = new MenuBar();        Menu gameMenu = new Menu("Game");        MenuItem newBeginnerItem = new MenuItem("New Beginner Game");        MenuItem newIntermediateItem = new MenuItem("New Intermediate Game");        MenuItem newExpertItem = new MenuItem("New Expert Game");        MenuItem newCustomItem = new MenuItem("New Custom Game");        MenuItem exitItem = new MenuItem("Exit");        gameMenu.getItems().addAll(newBeginnerItem, newIntermediateItem, newExpertItem, newCustomItem, new SeparatorMenuItem(), exitItem);        Menu optionsMenu = new Menu("Options");        MenuItem setMinesItem = new MenuItem("Set Number of Mines");        MenuItem setGridSizeItem = new MenuItem("Set Grid Size");        optionsMenu.getItems().addAll(setMinesItem, setGridSizeItem);        Menu helpMenu = new Menu("Help");        MenuItem howToPlayItem = new MenuItem("How To Play");        MenuItem aboutItem = new MenuItem("About");        helpMenu.getItems().addAll(howToPlayItem, aboutItem);        menuBar.getMenus().addAll(gameMenu, optionsMenu, helpMenu);        gameBoard = new GridPane();        gameBoard.setPadding(new Insets(10));        gameBoard.setHgap(0);        gameBoard.setVgap(0);        ImageView[][] imageViews = new ImageView[model.getRows()][model.getCols()];        for (int row = 0; row < model.getRows(); row++) {            for (int col = 0; col < model.getCols(); col++) {                ImageView imageView = new ImageView(new Image(getClass().getClassLoader().getResource("images/blank.gif").toString()));                GridPane.setConstraints(imageView, col, row);                gameBoard.getChildren().add(imageView);                imageViews[row][col] = imageView;            }        }        timeLabel = new Label("Time: 0");        minesLabel = new Label("Mines: " + model.bombsLeft());        timeLabel.setFont(Font.font(20));        minesLabel.setFont(Font.font(20));        minesLabel.setAlignment(Pos.BOTTOM_CENTER);        timeLabel.setAlignment(Pos.BOTTOM_CENTER);        root.setTop(menuBar);        gameBoard.setAlignment(Pos.CENTER);        root.setCenter(gameBoard);        HBox bottomBar = new HBox();        bottomBar.setAlignment(Pos.CENTER);        bottomBar.getChildren().addAll(timeLabel, new Label("\t\t"), minesLabel);        root.setBottom(bottomBar);        stage.setMinHeight(430);        stage.setMinWidth(400);        Scene scene = new Scene(root, 600, 400);        stage.setScene(scene);        stage.show();        startTime = System.currentTimeMillis();        startTimer();        initEventHandlers(imageViews);        newBeginnerItem.setOnAction(e -> resetGame(8, 8, 10));        newIntermediateItem.setOnAction(e -> resetGame(16, 16, 40));        newExpertItem.setOnAction(e -> resetGame(16, 31, 99));        newCustomItem.setOnAction(e -> customGame());        exitItem.setOnAction(e -> {            gameBoard.getChildren().clear();            timeLabel.setText("Time: 0");            minesLabel.setText("Mines: 0");            startTime = System.currentTimeMillis();            stopTimer();        });        setMinesItem.setOnAction(e -> showSetMinesWindow());        setGridSizeItem.setOnAction(e -> showSetGridSizeWindow());        howToPlayItem.setOnAction(e -> showHowToPlayWindow());        aboutItem.setOnAction(e -> showAboutWindow());    }    private void initEventHandlers(ImageView[][] imageViews) {        for (int row = 0; row < imageViews.length; row++) {            for (int col = 0; col < imageViews[row].length; col++) {                int finalRow = row;                int finalCol = col;                imageViews[row][col].setOnMouseClicked(e -> {                    if (model.isGameNotOver() && e.getButton() == MouseButton.PRIMARY) {                        if (firstMove) {                            model.placeMines(finalRow, finalCol);                            firstMove = false;                        }                        revealCell(finalRow, finalCol, imageViews);                    } else if (model.isGameNotOver() && e.getButton() == MouseButton.SECONDARY) {                        toggleFlag(finalRow, finalCol, imageViews);                    }                });            }        }    }    private void updateView(ImageView[][] imageViews) {        for (int row = 0; row < imageViews.length; row++) {            for (int col = 0; col < imageViews[row].length; col++) {                if (model.isCovered(row, col)) {                    if (model.isFlagged(row, col)) {                        imageViews[row][col].setImage(new Image(getClass().getClassLoader().getResource("images/bomb_flagged.gif").toString()));                    } else {                        imageViews[row][col].setImage(new Image(getClass().getClassLoader().getResource("images/blank.gif").toString()));                    }                } else if (model.isBomb(row, col)) {                    imageViews[row][col].setImage(new Image(getClass().getClassLoader().getResource("images/bomb_revealed.gif").toString()));                } else {                    imageViews[row][col].setImage(new Image(getClass().getClassLoader().getResource("images/num_" + model.numNeighborsWithBombs(row, col) + ".gif").toString()));                }            }        }    }    private void revealCell(int row, int col, ImageView[][] imageViews) {        if (model.numNeighborsWithBombs(row, col) == 0 && !model.isBomb(row, col)) {            model.uncoverClearTiles(row, col);        } else {            model.revealTile(row, col);        }        updateView(imageViews);        if (model.isGameWon()) {            stopTimer();            Alert alert = new Alert(Alert.AlertType.INFORMATION, "Congratulations! You won the game.", ButtonType.OK);            alert.showAndWait();        } else if (model.isGameLost()) {            stopTimer();            Alert alert = new Alert(Alert.AlertType.INFORMATION, "Game Over! You lost the game.", ButtonType.OK);            alert.showAndWait();        }    }    private void toggleFlag(int row, int col, ImageView[][] imageViews) {        model.toggleFlag(row, col);        updateView(imageViews);    }    private void startTimer() {        if (timer == null) {            timer = new AnimationTimer() {                @Override                public void handle(long now) {                    long seconds = (System.currentTimeMillis() - startTime) / 1000;                    timeLabel.setText("Time: " + seconds);                    int minesLeft = model.bombsLeft();                    minesLabel.setText("Mines: " + minesLeft);                }            };        }        timer.start();    }    private void stopTimer() {        if (timer != null) {            timer.stop();        }    }    private void resetGame(int rows, int cols, int mines) {        model = new MinesweeperModel(rows, cols, mines);        firstMove = true;        gameBoard.getChildren().clear();        ImageView[][] imageViews = new ImageView[model.getRows()][model.getCols()];        for (int row = 0; row < model.getRows(); row++) {            for (int col = 0; col < model.getCols(); col++) {                ImageView imageView = new ImageView(new Image(getClass().getClassLoader().getResource("images/blank.gif").toString()));                GridPane.setConstraints(imageView, col, row);                gameBoard.getChildren().add(imageView);                imageViews[row][col] = imageView;            }        }        minesLabel.setText("Mines: " + mines);        startTime = System.currentTimeMillis();        startTimer();        initEventHandlers(imageViews);    }    private void customGame() {        TextInputDialog input = new TextInputDialog();        input.setHeaderText("Enter rows, columns, and number of mines (comma separated):");        input.showAndWait();        String output = input.getEditor().getText();        int commaIndex1 = output.indexOf(',');        int commaIndex2 = output.indexOf(',', commaIndex1 + 1);        if (commaIndex1 != -1 && commaIndex2 != -1 && commaIndex2 < output.length() - 1) {            try {                int rows = Integer.parseInt(output.substring(0, commaIndex1).trim());                int cols = Integer.parseInt(output.substring(commaIndex1 + 1, commaIndex2).trim());                int mines = Integer.parseInt(output.substring(commaIndex2 + 1).trim());                if (rows > 0 && cols > 0 && mines > 0 && mines < rows * cols) {                    resetGame(rows, cols, mines);                    minesLabel.setText("Mines: " + model.bombsLeft());                } else {                    Alert alert = new Alert(Alert.AlertType.ERROR, "Invalid input. Please enter valid values.", ButtonType.OK);                    alert.showAndWait();                }            } catch (Exception e) {                Alert alert = new Alert(Alert.AlertType.ERROR, "Invalid input. Please enter numeric values.", ButtonType.OK);                alert.showAndWait();            }        } else {            Alert alert = new Alert(Alert.AlertType.ERROR, "Invalid input format. Please enter rows, columns, and mines separated by commas.", ButtonType.OK);            alert.showAndWait();        }    }    private void showSetMinesWindow() {        TextInputDialog input = new TextInputDialog();        input.setHeaderText("How many mines would you like?");        input.showAndWait();        try {            int newMines = Integer.parseInt(input.getEditor().getText());            if (newMines > 0 && newMines < model.getRows() * model.getCols()) {                resetGame(model.getRows(), model.getCols(), newMines);                minesLabel.setText("Mines: " + model.bombsLeft());            } else {                Alert alert = new Alert(Alert.AlertType.ERROR, "Sorry. The number of mines must be between 1 and " + (model.getRows() * model.getCols() - 1), ButtonType.OK);                alert.showAndWait();            }        } catch (Exception e) {            Alert alert = new Alert(Alert.AlertType.ERROR, "Invalid input. Please enter a valid number.", ButtonType.OK);            alert.showAndWait();        }    }    private void showSetGridSizeWindow() {        TextInputDialog input = new TextInputDialog();        input.setHeaderText("Enter rows and columns (comma separated):");        input.showAndWait();        String output = input.getEditor().getText();        int commaIndex = output.indexOf(',');        if (commaIndex != -1) {            try {                int rows = Integer.parseInt(output.substring(0, commaIndex).trim());                int cols = Integer.parseInt(output.substring(commaIndex + 1).trim());                if (rows > 0 && cols > 0) {                    resetGame(rows, cols, model.getNumMines());                    minesLabel.setText("Mines: " + model.bombsLeft());                } else {                    Alert alert = new Alert(Alert.AlertType.ERROR, "Invalid input. Please enter valid values.", ButtonType.OK);                    alert.showAndWait();                }            } catch (Exception e) {                Alert alert = new Alert(Alert.AlertType.ERROR, "Invalid input. Please enter numeric values.", ButtonType.OK);                alert.showAndWait();            }        } else {            Alert alert = new Alert(Alert.AlertType.ERROR, "Invalid input. Please enter rows and columns separated by commas.", ButtonType.OK);            alert.showAndWait();        }    }    private void showAboutWindow() {        Stage aboutStage = new Stage();        aboutStage.setTitle("About");        Label titleLabel = new Label("Minesweeper");        titleLabel.setFont(Font.font(20));        Label versionLabel = new Label("Version 1.0");        Label nameLabel = new Label("By Tejas Bojanapati");        VBox aboutLayout = new VBox(10);        aboutLayout.setAlignment(Pos.CENTER);        aboutLayout.getChildren().addAll(titleLabel, versionLabel, nameLabel);        Scene aboutScene = new Scene(aboutLayout, 200, 150);        aboutStage.setScene(aboutScene);        aboutStage.show();    }    private void showHowToPlayWindow() {        Stage howtoplayStage = new Stage();        howtoplayStage.setTitle("How to Play");        WebView webView = new WebView();        WebEngine webEngine = webView.getEngine();        File file = new File("how_to_play.html");        String url = "file:///" + file.getAbsolutePath();        webEngine.load(url);        VBox root = new VBox();        root.getChildren().add(webView);        Scene scene = new Scene(root, 800, 500);        howtoplayStage.setScene(scene);        howtoplayStage.show();    }}